If you are too lazy to open Chrome and go to github and then open ppl-utils and all that shit, these are all the functions!

You're welcome :]

pewpew.print(str)
    Prints the str, used for debugging.

pewpew.print_debug_info()
    Prints debug info: the number of entities created and the amount of memory used by the script.

pewpew.set_level_size(width, height)
    Sets the level's size. 
    Implicetely adds walls to make sure that entities can not go outside of the level's boundaries.
    width and height are clamped to the range [0fx, 6000fx]. 
    If this function is not called, the level size is (10fx, 10fx), which is uselessly small for most cases.

pewpew.add_wall(start_x, start_y, end_x, end_y)
    Adds a wall to the level from (start_x,start_y) to (end_x,end_y), and returns its wall ID. 
    A maximum of 200 walls can be added to a level.

pewpew.remove_wall(wall_id)
    Remove the wall with the given wall_id.

pewpew.add_update_callback(update_callback)
    Adds a callback that will be updated at each game tick.

pewpew.get_number_of_players()
    Returns the number of players in the game.

pewpew.increase_score_of_player(player_index, delta)
    Increases the score of the player at the specified player_index by an amount of delta. 
    player_index must in the range [0, get_number_of_players() - 1]. 
    Note that delta can be negative.

pewpew.stop_game()
    Ends the current game.

pewpew.get_player_inputs(player_index)
    Returns the inputs of the player at the specified index. 
    The return values are in order: 
    the movement joystick's angle (between 0 and 2pi), 
    the movement joystick's distance (between 0 and 1), 
    the shoot joystick's angle (between 0 and 2pi), 
    and the shoot joystick's distance (between 0 and 1).

pewpew.get_score_of_player(player_index)
    Returns the score of the player at the specified player_index. 
    player_index must in the range [0, get_number_of_players() - 1].

pewpew.configure_player(player_index, configuration)
    Configures the player at the specified player_index. 
    player_index must in the range [0, get_number_of_players() - 1]. 
    A camera_distance less than 0fx makes the camera move away from the ship. 
    camera_rotation_x_axis is in radian and rotates along the X axis. 
    To temporarily override the XY position of the camera, set both camera_x_override and camera_y_override; 
    this will make the camera be interpolated from wherever it was, to that new position.

pewpew.configure_player_hud(player_index, configuration)
    Configures the player's HUD.
    player_index must in the range [0, get_number_of_players() - 1].

pewpew.get_player_configuration(player_index)
    Returns a map containing the configuration of the player at the specified player_index.

pewpew.configure_player_ship_weapon(ship_id, configuration)
    Configures the weapon of the ship identified with ship_id using configuration. 
    frequency determines the frequency of the shots. 
    cannon determines the type of cannon. 
    duration determines the number of game ticks during which the weapon will be available. 
    Once the duration expires, the weapon reverts to its permanent configuration.
    If duration is omitted, the weapon will be permanently set to this configuration. 
    If frequency or cannon is omitted, the ship is configured to not have any weapon.

pewpew.add_damage_to_player_ship(ship_id, damage)
    Reduces the amount of shield of the player that owns the ship by damage points. 
    If the player receives damage while having 0 shields left, the player loses.

pewpew.add_arrow_to_player_ship(ship_id, target_id, color)
    Adds an arrow to the ship identified with ship_id pointing towards the entity identified with entity_id, 
    and returns the identifier of the arrow. color specifies the arrow's color. 
    The arrow is automatically removed when the target entity is destroyed.

pewpew.remove_arrow_from_player_ship(ship_id, arrow_id)
    Removes the arrow identified by arrow_id from the ship identified by ship_id.

pewpew.make_player_ship_transparent(ship_id, transparency_duration)
    Makes the player ship transparent for transparency_duration game ticks.

pewpew.set_player_ship_speed(ship_id, factor, offset, duration)
    Sets and returns the effective speed of the specified player ship as a function of the base speed of the ship. 
    By default, a player ship moves according to its base speed, which is 10 distance units per tick 
    (in the future, different ships may have different base speeds). 
    Assuming the base speed of the ship is S, the new effective speed will be (factor*S)+offset. 
    duration is the number of ticks during which the effective speed will be applied. 
    Afterwards, the ship's speed reverts to its base speed. 
    If duration is negative, the effective speed never reverts to the base speed.

pewpew.get_all_entities()
    Returns the list of the entityIDs of all the entities currently in the level. 
    This includes the various bullets and all the custom entities.

pewpew.get_entities_colliding_with_disk(center_x, center_y, radius)
    Returns the list of collidable entities (which includes all enemies) that overlap with the given disk.

pewpew.get_entity_count(type)
    Returns the number of entities of type that are alive.

pewpew.get_entity_type(entity_id)
    Returns the type of the given entity.

pewpew.play_ambient_sound(sound_path, index)
    Plays the sound described at sound_path at the index index.

pewpew.play_sound(sound_path, index, x, y)
    Plays the sound described at sound_path at the in-game location of x,y.

pewpew.create_explosion(x, y, color, scale, particle_count)
    Creates an explosion of particles at the location x,y. color specifies the color of the explosion. 
    scale describes how large the explosion will be. It should be in the range ]0, 10], with 1 being an average explosion. 
    particle_count specifies the number of particles that make up the explosion. 
    It must be in the range [1, 100].

pewpew.new_asteroid(x, y)
pewpew.new_baf(x, y, angle, speed, lifetime)
pewpew.new_baf_red(x, y, angle, speed, lifetime)
pewpew.new_baf_blue(x, y, angle, speed, lifetime)
pewpew.new_bomb(x, y, type)
pewpew.new_customizable_entity(x, y)
pewpew.new_inertiac(x, y, acceleration, angle)
pewpew.new_mothership(x, y, type, angle)
pewpew.new_player_ship(x, y, player_index)
pewpew.new_player_bullet(x, y, angle, player_index)
pewpew.new_rolling_cube(x, y)
pewpew.new_rolling_sphere(x, y, angle, speed)
pewpew.new_wary(x, y)
pewpew.new_ufo(x, y, dx)
pewpew.rolling_cube_set_enable_collisions_with_walls(entity_id, collide_with_walls)
    Sets whether the rolling cube identified with id collides with walls. By default it does not.
    collide_with_walls is a boolean.

pewpew.ufo_set_enable_collisions_with_walls(entity_id, collide_with_walls)
    Sets whether the ufo identified with id collides with walls. By default it does not.
    collide_with_walls is a boolean.

pewpew.entity_get_position(entity_id)
pewpew.entity_get_is_alive(entity_id)
pewpew.entity_get_is_started_to_be_destroyed(entity_id)
    Returns whether the entity identified by id is in the process of being destroyed. 
    Returns false if the entity does not exist.

pewpew.entity_set_position(entity_id, x, y)
pewpew.entity_set_radius(entity_id, radius)
    Sets the radius of the entity identified by id. 
    To give you a sense of scale, motherships have a radius of 28fx.

pewpew.entity_set_update_callback(entity_id, callback)
    Sets a callback that will be called at every tick as long as the entity identified by id is alive. 
    Remove the callback by passing a nil callback. 
    The callbacks gets called with the entity ID.

pewpew.entity_destroy(entity_id)
    Makes the entity identified by id immediately disappear forever.

pewpew.entity_react_to_weapon(entity_id, weapon)
    Makes the entity identified by id react to the weapon described in weapon_description. 
    Returns whether the entity reacted to the weapon. 
    The returned value is typically used to decide whether the weapon should continue to exist or not. 
    In the case of an explosion, x and y should store the origin of the explosion. 
    In the case of a bullet, x and y should store the vector of the bullet.

pewpew.customizable_entity_set_position_interpolation(entity_id, enable)
    Sets whether the position of the mesh wil be interpolated when rendering. 
    In general, this should be set to true if the entity will be moving smoothly.

pewpew.customizable_entity_set_mesh(entity_id, file_path, index)
    Sets the mesh of the customizable entity identified by id to the mesh described in the file file_path at the index index. 
    index starts at 0. 
    If file_path is an empty string, the mesh is removed.

pewpew.customizable_entity_set_flipping_meshes(entity_id, file_path, index_0, index_1)
    Similar to customizable_entity_set_mesh, 
    but sets two meshes that will be used in alternation. 
    By specifying 2 separate meshes, 60 fps animations can be achieved.

pewpew.customizable_entity_set_mesh_color(entity_id, color)
    Sets the color multiplier for the mesh of the customizable entity identified by id.

pewpew.customizable_entity_set_string(entity_id, text)
    Sets the string to be displayed as part of the mesh of the customizable entity identified by id.

pewpew.customizable_entity_set_mesh_xyz(entity_id, x, y, z)
    Sets the position of the mesh to x,y,z, relative to the center of the customizable entity identified by id

pewpew.customizable_entity_set_mesh_z(entity_id, z)
    Sets the height of the mesh of the customizable entity identified by id. 
    A z greater to 0fx makes the mesh be closer, while a z less than 0fx makes the mesh be further away.

pewpew.customizable_entity_set_mesh_scale(entity_id, scale)
    Sets the scale of the mesh of the customizable entity identified by id. 
    A scale less than 1fx makes the mesh appear smaller, while a scale greater than 1fx makes the mesh appear larger.

pewpew.customizable_entity_set_mesh_xyz_scale(entity_id, x_scale, y_scale, z_scale)
    Sets the scale of the mesh of the customizable entity identified by id along the x,y,z axis. 

pewpew.customizable_entity_set_mesh_angle(entity_id, angle, x_axis, y_axis, z_axis)
    Sets the rotation angle of the mesh of the customizable entity identified by id. 
    The rotation is applied along the axis defined by x_axis,y_axis,z_axis.

pewpew.customizable_entity_skip_mesh_attributes_interpolation(entity_id)
    Skips the interpolation of the mesh's attributes (x, y, z, scale_x, scale_y, scale_z, rotation).

pewpew.customizable_entity_configure_music_response(entity_id, config)
    Configures the way the entity is going to respond to the music.
    {color_start , color_end , scale_x_start , scale_x_end , scale_y_start , scale_y_end , scale_z_start , scale_z_end} 

pewpew.customizable_entity_add_rotation_to_mesh(entity_id, angle, x_axis, y_axis, z_axis)
    Adds a rotation to the mesh of the customizable entity identified by id. 
    The rotation is applied along the axis defined by x_axis,y_axis,z_axis.

pewpew.customizable_entity_set_visibility_radius(entity_id, radius)
    Sets the radius defining the visibility of the entity. 
    This allows the game to know when an entity is actually visible, 
    which in turns allows to massively optimize the rendering. 
    Use the smallest value possible. 
    If not set, the rendering radius is an unspecified large number that effectively makes the entity always be rendered, 
    even if not visible.

pewpew.customizable_entity_configure_wall_collision(entity_id, collide_with_walls, collision_callback)
    collide_with_walls configures whether the entity should stop when colliding with walls. 
    If collision_callback is not nil, it is called anytime a collision is detected. 
    The callback gets called with the entity id of the entity with the callback, and with the normal to the wall.
    collision_callback(entity_id, wall_normal_x, wall_normal_y)

pewpew.customizable_entity_set_player_collision_callback(entity_id, collision_callback)
    Sets the callback for when the customizable entity identified by id collides with a player's ship. 
    The callback gets called with the entity id of the entity with the callback, 
    and the player_index and ship_id that were involved in the collision. 
    Don't forget to set a radius on the customizable entity, otherwise no collisions will be detected.
    collision_callback(entity_id, player_index, ship_entity_id)

pewpew.customizable_entity_set_weapon_collision_callback(entity_id, weapon_collision_callback)
    Sets the callback for when the customizable entity identified by id collides with a player's weapon. 
    The callback gets called with the entity_id of the entity on which the callback is set, 
    the player_index of the player that triggered the weapon, and the type of the weapon. 
    The callback must return a boolean saying whether the entity reacts to the weapon. 
    In the case of a bullet, this boolean determines whether the bullet should be destroyed.
    weapon_collision_callback(entity_id, player_index, weapon_type)

pewpew.customizable_entity_start_spawning(entity_id, spawning_duration)
    Makes the customizable entity identified by id spawn for a duration of spawning_duration game ticks.

pewpew.customizable_entity_start_exploding(entity_id, explosion_duration)
    Makes the customizable entity identified by id explode for a duration of explosion_duration game ticks. 
    After the explosion, the entity is destroyed. 
    explosion_duration must be less than 255. 
    Any scale applied to the entity is also applied to the explosion.